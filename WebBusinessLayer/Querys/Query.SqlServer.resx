<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="GetClient" xml:space="preserve">
    <value>SELECT * FROM cliente WHERE v_IdCliente = @id</value>
  </data>
  <data name="GetIdClient" xml:space="preserve">
    <value>SELECT v_IdCliente FROM cliente WHERE v_NroDocIdentificacion = @id AND v_Password=@pass</value>
  </data>
  <data name="GetIdVenta" xml:space="preserve">
    <value>SELECT v_IdVenta FROM venta WHERE i_IdTipoDocumento=@tipoDoc AND  v_SerieDocumento=@serie AND v_CorrelativoDocumento=@correlativo AND t_FechaRegistro=@fecha AND d_Total=@total</value>
  </data>
  <data name="GetIscFromDetail" xml:space="preserve">
    <value>SELECT i.d_Monto, i.d_Porcentaje, i.i_IdSistemaIsc FROM productodetalle p
                            LEFT OUTER JOIN productoisc i ON p.v_IdProducto = i.v_IdProducto
                            WHERE p.v_IdProductoDetalle = @id  AND  i.v_Periodo = @periodo;</value>
  </data>
  <data name="GetListFromClient" xml:space="preserve">
    <value>SELECT * FROM venta WHERE v_SerieDocumento LIKE '[FB]%' AND v_IdCliente=@id</value>
  </data>
  <data name="GetLite" xml:space="preserve">
    <value>SELECT v_Ruc, v_RazonSocial, v_NombreComercial, v_Domicilio, v_Resolucion FROM configuracionfacturacion</value>
  </data>
  <data name="GetReporteInvoice" xml:space="preserve">
    <value>SELECT v.*, vd.*, 
                                c.v_IdCliente, c.i_IdTipoIdentificacion, c.v_NroDocIdentificacion, c.v_PrimerNombre, c.v_SegundoNombre, c.v_ApePaterno, c.v_ApeMaterno, c.v_RazonSocial, c.v_DirecPrincipal,
                                d1.v_Value1, d2.v_Value1 FROM venta v
                                LEFT OUTER JOIN cliente c ON v.v_IdCliente = c.v_IdCliente
                                LEFT OUTER JOIN ventadetalle vd ON v.v_IdVenta = vd.v_IdVenta
                                LEFT OUTER JOIN datahierarchy d1 ON  vd.i_IdUnidadMedida = d1.i_ItemId AND d1.i_GroupId = 17
                                LEFT OUTER JOIN datahierarchy d2 ON  v.i_IdIgv = d2.i_ItemId AND d2.i_GroupId = 27
                                WHERE v.v_IdVenta = @id</value>
  </data>
  <data name="GetVenta" xml:space="preserve">
    <value>SELECT * FROM venta WHERE v_IdVenta=@idVenta</value>
  </data>
  <data name="GetVentaCliente" xml:space="preserve">
    <value>SELECT v.*, c.i_IdTipoIdentificacion,c.v_NroDocIdentificacion,c.v_ApePaterno,
                        c.v_ApeMaterno,c.v_PrimerNombre,c.v_SegundoNombre, c.v_RazonSocial, d.v_Value1 FROM venta v 
                        LEFT OUTER JOIN cliente c ON v.v_IdCliente = c.v_IdCliente
                        LEFT OUTER JOIN datahierarchy d ON v.i_IdIgv = d.i_ItemId AND d.i_GroupId = 27
                        WHERE v.v_IdVenta = @idVenta</value>
  </data>
  <data name="GetVentaDetalles" xml:space="preserve">
    <value>SELECT v.*, d2.v_Value2, d3.v_Value2 FROM ventadetalle v
                        LEFT OUTER JOIN datahierarchy d on v.i_IdUnidadMedida = d.i_ItemId AND d.i_GroupId = 17
                        LEFT OUTER JOIN datahierarchy d2 on d.i_ParentItemId = d2.i_ItemId AND d2.i_GroupId = @idg
                        LEFT OUTER JOIN datahierarchy d3 ON v.i_IdTipoOperacion = d3.i_ItemId AND d3.i_GroupId = 35
                        WHERE v.v_IdVenta = @id</value>
  </data>
</root>